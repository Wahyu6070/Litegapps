#!/sbin/sh
# Kopi Installer V1.0
# Since 08-05-2020
# Latest Update 30-08-2020
# by wahyu6070 (dont change)

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";

ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false;
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;
$BOOTMODE && OUTFD=/proc/self/fd/0;
########################################
# Util Functions
########################################

ui_print() { $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> $OUTFD; }
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_progress() { echo "set_progress $1" > $OUTFD; }

#Kopi functions
print(){ $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> $OUTFD; }
getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }
del(){ rm -rf "$@"; }
delete(){ rm -rf "$@"; }
cdir(){ mkdir -p "$@"; }
abort(){ print "$1"; exit 1; }

########################################
#    Kopi Script
########################################
	
#(dont change)
print " ";
print "- Kopi Installer by wahyu6070";
print " "
show_progress 1.34 0;

#mount
print "- Mounting"
active_slot=`getprop ro.boot.slot_suffix`
if [ ! -z "$active_slot" ]; then
  device_abpartition=true
  if [ -n "$(cat /etc/fstab | grep /system_root)" ];
  then
    MOUNT_POINT=/system_root
  else
    MOUNT_POINT=/system
  fi
elif [ -n "$(cat /etc/fstab | grep /system_root)" ];
then
  device_abpartition=false
  MOUNT_POINT=/system_root
else
  device_abpartition=false
  MOUNT_POINT=/system
fi
mount -o rw,remount $MOUNT_POINT || mount $MOUNT_POINT || mount -o rw,remount / && sar=1 || mount -o rw,remount -t auto $MOUNT_POINT || abort "- Abort mounting system"
mount -o rw,remount /vendor || mount /vendor || mount -o rw,remount / && sar=1 || mount -o rw,remount -t auto /vendor || abort "- Abort mounting vendor"
test -f /system/system/build.prop && root=/system/system;
set_progress 0.4;

#system dir
if [ -f /system/system/build.prop ]; then
system=/system/system
elif [ -f /system_root/system/build.prop ]; then
system=/system_root/system
elif [ -f /system_root/build.prop ]; then
system=/system_root
else
system=/system
fi

#Extract
kopi=/dev/tmp/kopi
MODPATH=$kopi
TMPDIR=/dev/tmp
cdir $kopi;
cd $kopi
print "- Extracting ZIP File"
unzip -o "$ZIPFILE" >&2
[ ! -f module.prop ] && abort "- Module.prop Not Found"

#prop
prop=$system/build.prop
API=`getp ro.build.version.sdk $prop`
ABI=`getp ro.product.cpu.abi $prop | cut -c-3`
ABI2=`getp ro.product.cpu.abi2 $prop | cut -c-3`
ABILONG=`getp ro.product.cpu.abi $prop`
ARCH=arm
ARCH32=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; ARCH32=arm; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; ARCH32=x86; IS64BIT=true; fi;

MODULE=./module.prop
ID=`getp id $MODULE`
NAME=`getp name $MODULE`
VERSION=`getp version $MODULE`
VERSIONCODE=`getp versioncode $MODULE`
DEVICE=`getp device $MODULE`
DATE=`getp date $MODULE`
AUTHOR=`getp author $MODULE`
KOPIMOD=/data/kopi/modules/"$ID"
set_progress 0.5;

#req
minsdk=`getp minsdk $MODULE`
if [ $minsdk -eq $minsdk ] && [ $API -lt $minsdk ]; then
abort "- Android version not support !"
fi

#Type install
if [ $(getp typeinstall $MODULE) = kopi ]; then TYPEINSTALL=kopi
elif [ $(getp typeinstall $MODULE) = magisk ]; then TYPEINSTALL=magisk
elif [ $(getp typeinstall $MODULE) = false ]; then TYPEINSTALL=false
else
$BOOTMODE && TYPEINSTALL=magisk || [ -f /data/adb/magisk/magisk ] && TYPEINSTALL=magisk || TYPEINSTALL=kopi
fi

# Uninstall
if [ -f $KOPIMOD/uninstall.sh ] && [ $TYPEINSTALL != magisk ] && [ $(getp versioncode $KOPIMOD/module.prop) -eq $VERSIONCODE ]; then
print "- Uninstalling $NAME"
test -f $KOPIMOD/uninstall.sh && . $KOPIMOD/uninstall.sh || abort "- Uninstalling failed !"
del $KOPIMOD
else
# Installing
	cdir $KOPIMOD
	[ -f uninstall.sh ] && cp -pf uninstall.sh $KOPIMOD && chmod 775 $KOPIMOD/uninstall.sh;
	[ -f module.prop ] && cp -pf module.prop $KOPIMOD;
	[ -d bin ] && chmod -R 775 $MODPATH/bin;
	[ -f install.sh ] && chmod 775 install.sh && . ./install.sh;
	[ -f customize.sh ] && chmod 0775 customize.sh && . ./customize.sh;
	
	case $TYPEINSTALL in
	magisk)
	print "- Type Magisk Module"
	[ -f /data/adb/magisk/util_functions.sh ] && [ $TYPEINSTALL = magisk ] && . /data/adb/magisk/util_functions.sh
	modup="/data/adb/modules_update/$ID"
	del $modup
	cdir "$modup"
	cdir "/data/adb/modules/$ID"
	touch "/data/adb/modules/$ID/update"
	cp -pf $kopi/module.prop "/data/adb/modules/$ID/"
	cp -af $kopi/* "$modup"
	del $modup/META-INF
	del $modup/install.sh
	del $modup/customize.sh
	del $modup/install.zip
	del $modup/README.md
	;;
	kopi)
	print "- Type Kopi Module"
	if [ -d $kopi/system/vendor ]; then
	cdir $kopi/vendor
	cp -af $kopi/system/vendor $kopi/vendor || abort "- Failed copying system/vendor";
	del $kopi/system/vendor
	fi;
	if [ -d $kopi/system ]; then print "- Copying system"; cp -af $kopi/system/* $system || abort "- Failed copying system";fi;
	if [ -d $kopi/vendor ]; then print "- Copying vendor"; cp -af $kopi/vendor/* /vendor || abort "- Failed copying vendor";fi;
	set_progress 9.1;
	;;
	false)
	print "- Type install manual" ;;
	*)
	abort "- Type Install $TYPEINSTALL Not found"
	;;
	esac
fi

#umount
print "- Umounting";
[ $TYPEINSTALL = kopi ] && umount_all
set_progress 1.1;
cd /;
del $TMPDIR
print "- Done";
set_progress 0.3;
exit 0;

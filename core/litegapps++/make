#################################################
#litegapps functions
#################################################
BASE_LITEGAPPS2=$base/core/litegapps++
copy_binary_flashable(){
	case $(get_config compression) in
     xz)
       local flashable_bin_32=xz
     ;;
      br | brotli)
       local flashable_bin_32=brotli
     ;;
     zip)
     	local flashable_bin_32=zip
     ;;
     7z | 7za | 7zip | 7zr | p7zip)
     	local flashable_bin_32=7za
     ;;
     zstd | zst)
     	local flashable_bin_32=zstd
     ;;
     gz | gzip | gunzip)
     	local flashable_bin_32=gz
     ;;
     esac
	local input_arch=$1
	case $input_arch in
		arm | arm64)
			local ARCHINPUT=arm
			for W in zipalign tar zip $flashable_bin_32; do
				if [ -f $base/bin/$ARCHINPUT/$W ]; then
				cdir $tmp/$WFL/bin/$ARCHINPUT
				cp -pf $base/bin/$ARCHINPUT/$W $tmp/$WFL/bin/$ARCHINPUT/
				else
					ERROR "Binary <$base/bin/$ARCHINPUT/$W> not found"
				fi
			
			done
		
		;;
		x86 | x86_64)
		echo
		
		;;
	esac
}


make_flashable_litegapps_plus(){
	for WFL in MAGISK RECOVERY AUTO; do
		printlog "- Build flashable [$WFL]"
		cdir $tmp/$WFL
		copy_binary_flashable $BIN_ARCH
			# copy core/utils/magisk or kopi installer
			for W in 27-litegapps.sh litegapps-functions litegapps-post-fs litegapps; do
				if [ -f $base/core/utils/$W ]; then
					cp -pf $base/core/utils/$W $tmp/$WFL/bin/
				else
					ERROR "utils <$base/core/utils/$W> not found"
				fi
			
			done
			# copy core/utils files
			for W in customize.sh README.md LICENSE; do
				if [ -f $BASE_LITEGAPPS2/utils/$W ]; then
				cp $BASE_LITEGAPPS2/utils/$W $tmp/$WFL/
				else
				ERROR "magisk files <$BASE_LITEGAPPS22/utils/$W> not found"
				fi
			done
		case $WFL in
			MAGISK)
				cp -af $base/core/utils/magisk/* $tmp/$WFL/
			;;
			RECOVERY)
				cp -af $base/core/utils/kopi/* $tmp/$WFL/
				#kopi mode install kopi (recovery)
				sed -i 's/'"$(getp typeinstall $tmp/$WFL/module.prop)"'/'"kopi"'/g' $tmp/$WFL/module.prop
			;;
			AUTO)
				cp -af $base/core/utils/kopi/* $tmp/$WFL/
			;;
		esac
		# copy file.tar.(type archive) in tmp
			for W in $(ls -1 $tmp); do
				if [ -f $tmp/$W  ]; then
					test ! -d $tmp/$WFL/files && cdir $tmp/$WFL/files
				 	cp -pf $tmp/$W $tmp/$WFL/files/
				fi
			done
			
			local MODULE_PROP=$tmp/$WFL/module.prop
			local MODULE_DESC="litegapps++ is a google apps package that supports almost all arch and android versions while maintaining lightness, saving battery and more."
			sed -i 's/'"$(getp name $MODULE_PROP)"'/'"LiteGapps++ $PROP_STATUS"'/g' $MODULE_PROP
			sed -i 's/'"$(getp author $MODULE_PROP)"'/'"$PROP_BUILDER"'/g' $MODULE_PROP
			sed -i 's/'"$(getp version $MODULE_PROP)"'/'"$PROP_VERSION"'/g' $MODULE_PROP
			sed -i 's/'"$(getp versionCode $MODULE_PROP)"'/'"$PROP_VERSIONCODE"'/g' $MODULE_PROP
			sed -i 's/'"$(getp date $MODULE_PROP)"'/'"$(date +%d-%m-%Y)"'/g' $MODULE_PROP
			sed -i 's/'"$(getp description $MODULE_PROP)"'/'"$MODULE_DESC"'/g' $MODULE_PROP
			
			#set time stamp
			set_time_stamp $tmp/$WFL
			
			local NAME_ZIP="[$WFL]LiteGapps++_$(date +%Y%m%d)_${PROP_STATUS}.zip"
			local OUT_ZIP=$out/litegapps++
			printlog "- Build ZIP"
			cd $tmp/$WFL
			test ! -d $OUT_ZIP && cdir $OUT_ZIP
			test -f $OUT_ZIP/$NAME_ZIP && del $OUT_ZIP/$NAME_ZIP
			$bin/zip -r${PROP_ZIP_LEVEL} $OUT_ZIP/$NAME_ZIP . >/dev/null
			printlog " Name   : $NAME_ZIP"
			printlog " Level  : $PROP_ZIP_LEVEL"
			printlog " Size   : $(du -sh $OUT_ZIP/$NAME_ZIP | cut -f1)"
			printlog " Sha256 : $($bin/busybox sha256sum $OUT_ZIP/$NAME_ZIP | cut -d' ' -f1)"
			printlog "- Done "
			printlog " "
	done
	}

#################################################
#Core
#################################################
#binary copy architecture type
BIN_ARCH=arm
clear
printlog "## Building LiteGapps++ ##"
printlog " "
printlog " "
cp -af $BASE_LITEGAPPS2/gapps/* $tmp/
lgapps_unzip
make_tar
make_tar_arch
make_archive
make_flashable_litegapps_plus
echo $BASE_LITEGAPPS2

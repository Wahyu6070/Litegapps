####################################
#     Litegapps Core functions     #
####################################
print(){
	echo "$1"
	}
	
printlog(){
	print "$1"
	if [ "$1" != " " ]; then
	echo "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	echo "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	else
	print "$1" >> $log
	echo "$1" >> $loglive
	fi
	}
sedlog(){
	echo "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	echo "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	}
	
	
#
while_log(){
	echo "$1" | tee -a $log
	}
listlog(){
	echo " " >> $log
	echo "---------- Folder List : $1 ----------" >> $log
	echo " " >> $loglive
	echo "---------- Folder List : $1 ----------" >> $loglive
	find "$1" -type f | while read lol; do
	while_log "| $(du -sah $lol | cut -f 1) | $lol"
	done >> $loglive
	echo "--------------------------------------" >> $log
	echo " " >> $log
	echo "--------------------------------------" >> $loglive
	echo " " >> $loglive
	}

getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }

loadings() {
  PID=$!
  a=0;
  while [ -d /proc/$PID ]; do
    b=$((+1))
    a=$((a+1))
    sleep 0.9s
    printf "\r${@} [${a}Second]"
  done
}

loadingm() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((h+1))
    sleep 59.9s
    printf "\r${@} [${b}Minutes]"
  done
}

loadingz() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((a+1))
    sleep 0.9s
    printf "#"
  done
}

printmid() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}



setime(){
	if [[ $1 == '-f' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -f "$2" ]; then
	      touch -ct $3 "$2" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	   else
	      echo "setime: $2: Is not file"
	   fi
	elif [[ $1 == '-r' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -d "$2" ]; then
	      find "$2" -print | while read filename; do
	      touch -ct $3 "$filename" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	      done
	   else
	      echo "setime: $2: Is not directory"
	   fi
	elif [[ $1 == '--version' ]] || [[ $1 == '-v' ]]; then
	echo "setime v1.0 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    elif [[ $1 == '--help' ]] || [[ $1 == '-h' ]]; then
    echo "usage : setime <options> <input> <datetime>"
    echo " "
    echo "example : setime -r /sdcard/download 202004081503"
    echo " "
    echo "options"
    echo "-f                    file"
    echo "-r                    change all directory and file"
    echo "-v, --version         version"
    echo "-h, --help            help"
    echo " "
    echo "setime v1.0 since 2020-04-09 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    else
    echo "usage : setime --help"
    fi
}

#############################
#     Color
#############################

bash_color(){
G='\e[01;32m'		# GREEN TEXT
R='\e[01;31m'		# RED TEXT
Y='\e[01;33m'		# YELLOW TEXT
B='\e[01;34m'		# BLUE TEXT
V='\e[01;35m'		# VIOLET TEXT
Bl='\e[01;30m'		# BLACK TEXT
C='\e[01;36m'		# CYAN TEXT
W='\e[01;37m'		# WHITE TEXT
BGBL='\e[1;30;47m'	# Background W Text Bl
N='\e[0m'			# How to use (example): echo "${G}example${N}"
loadBar=' '			# Load UI
# Remove color codes if -nc or in ADB Shell
[ -n "$1" -a "$1" == "-nc" ] && shift && NC=true
[ "$NC" -o -n "$LOGNAME" ] && {
	G=''; R=''; Y=''; B=''; V=''; Bl=''; C=''; W=''; N=''; BGBL=''; loadBar='=';
}
}

del(){ rm -rf "$@"; }
cdir(){ mkdir -p "$@"; }

ch_con(){
chcon -h u:object_r:system_file:s0 "$1" || sedlog "Failed chcon $1"
}

tarex(){
	tar -xf "$1" -C "$2" || sedlog "Failed Extract tar $1 to $2"
	}
	
	
abort(){
	print " " | tee -a $log | tee -a $loglive
	print " !!! $1" | tee -a $log | tee -a $loglive
	print " " | tee -a $log | tee -a $loglive
	sleep 4s
	exit 1
	}
get_config() {
	getp "$1" "$base/config"
}
ERROR(){
	printlog "[ERROR] <$1>"
	sleep 5s
	exit 1
	}
lgapps_unzip(){
	printlog "- Unzip"
	find $tmp -name *.apk -type f | while read apkname; do
	case $apkname in
	*.apk)
	outdir=`dirname $apkname`
	while_log "$(basename $apkname)"
	cdir $outdir
	$bin/unzip -o $apkname -d $outdir
	del $apkname
	;;
	esac
	done >> $loglive
	
	}
make_tar(){
	print "- Make tar files"
	find $tmp -type d | while read folname; do
	local DIR_INPUT=`basename $folname`
	case "$DIR_INPUT" in
	system)
	for i1 in $(ls -1 $folname); do
    	if [ -d $folname/$i1 ]; then
      	 for i2 in $(ls -1 $folname/$i1); do
             	cd $folname/$i1
             	sedlog "- Creating .tar $folname/$i1/$i2"
             	tar -cf $i2.tar $i2
            	 del $i2
             	cd /
       	done
    	fi
	done
	;;
	vendor)
	for b1 in $(ls -1 $folname); do
   	 if [ -d $folname/$b1 ]; then
       	for b2 in $(ls -1 $folname/$b1); do
             	cd $folname/$b1
           	  sedlog "- Creating .tar $folname/$b1/$b2"
           	  tar -cf $b2.tar $b2
            	 del $b2
            	 cd /
       	done
    	fi
	done 
	;;
	esac
	done
}
make_tar_arch(){
	printlog "- Make files.tar"
	cd $tmp
	$bin/tar -cf "files.tar" *
	cd /
	for RM_LIST_TMP in $(ls -1 $tmp); do
		if [ -d $tmp/$RM_LIST_TMP ]; then
    		sedlog "- Removing $tmp/$RM_LIST_TMP"
    		del $tmp/$RM_LIST_TMP
    	fi
	done
}
make_archive(){
	compression=$(get_config compression)
lvlcom=$(get_config compression.level)
printlog "- Building archive : $compression"
printlog "- Level Compression : $lvlcom"
cd $tmp
for archi in $(ls -1 $tmp); do
   case $compression in
     xz)
       if [ $lvlcom -lt 10 ]; then
        $bin/xz -${lvlcom}e $tmp/$archi
        del $archi
       else
       abort "xz level 1-9"
       fi
     ;;
      br | brotli)
       if [ $lvlcom -lt 10 ]; then
        $bin/brotli -${lvlcom}j $archi
        del $archi
       else
       abort "brotli level 1-9"
       fi
     ;;
     zip)
     if [ $lvlcom -lt 10 ]; then
        $bin/zip -r${lvlcom} $archi.zip $archi >> $loglive
        del $archi
       else
       abort "zip level 1-9"
       fi
     ;;
     7z | 7za | 7zip | 7zr | p7zip)
     if [ $lvlcom -lt 10 ]; then
        $bin/7za a -t7z -m0=lzma -mx=$lvlcom -mfb=64 -md=32m -ms=on $archi.7z $archi >> $loglive
        del $archi
       else
       abort "7zip level 1-9"
       fi
     ;;
     zstd | zst)
     if [ $lvlcom -lt 20 ]; then
        $bin/zstd --rm -$lvlcom $archi >> $loglive
       else
       abort "Zstd level 1-19"
       fi
     ;;
     gz | gzip | gunzip)
     if [ $lvlcom -lt 10 ]; then
        $bin/gzip -$lvlcom $archi
       else
       abort "gzip level 1-9"
       fi
     ;;
     *)
       printlog "!!! Format $compression Not support"
       sleep 4s
       exit 1
      ;;
     esac
done
	
#make md5sum
for W in $(ls -1 $tmp); do
	if [ -f $tmp/$W ]; then
		$bin/busybox md5sum -b $tmp/$W | cut -d ' ' -f1 > $tmp/$W.md5
	fi
done
}
set_time_stamp(){
local input=$1
if [ $PROP_SET_TIME = true ] && [ $PROP_SET_DATE -eq $PROP_SET_DATE ]; then
setime -r $input $PROP_SET_DATE
fi
}